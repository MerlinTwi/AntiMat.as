package
{
	
	/** Мат-фильтр */
	public class Antimat {
		
		/** На что заменять матерные слова */
		private static const CENSORED:String = '<вц>';
		/** По какому шаблону была последняя замена (используется при анализе ложных срабатываний) */
		public static var LAST_USED_PATTERN:String;
		
		/**
		 * Заменает в тексте мат и оскобления
		 * @param	text			обрабатываемый текст
		 * @param	moderatorMode	true - выделить <МАТЕРНЫЕ> слова
		 * 							false - заменить матерные слова на CENSORED
		 * @return	обработанный текст
		 */
		static public function removeMat(text:String, moderatorMode:Boolean = false):String {
			if (!text) return text;
			if (!REPL) prepareRepl();
			
			var textLength:int = text.length,
				pos:Array = [], // [позиция1 в оригинальном тексте, слово1, ...] позиция = (длина союзов << 16) | (поз. в тексте)
				s:String = '', lastCh:String, 
				j:int, wordBeginLen:int, wordLen:int, newWord:Boolean = true;
				
			if (textLength > 0xFFFF) throw new Error('Very long text');
			for (var i:int = 0; i < textLength; i++) {
				var ch:String = REPL[text.charAt(i)];
				if (ch == '*') continue; // такие разделители не прерывают слово
				if (ch == lastCh && ch) { // все дублирования смысловых букв убираем
					wordLen++; // число повторений
					continue;
				}
				if (ch) { // слово продолжается
					if (newWord) {
						pos.push(i); // слово только началось
						newWord = false;
					}
					s += ch;
					wordBeginLen++;
				} else if (!newWord) { // закончилось слово
					// только если оно было длиннее 2-х букв, оставляем его
					// или разделитель цифры|англ.буквы
					// иначе плюсуем к следующему
					j = text.charCodeAt(i);
					if (wordBeginLen > 2 // только слова более двух букв
						// если после слова из менее двух букв идут цифры или англ. буквы, то его тоже сохраняем
						// чтобы не слилось с последующим
						|| (j >= 0x30 && j <= 0x39) // цифры
						|| (j == 0x5D/*]*/) // в [скобках] у нас ники там бывают сложные окончания, которые могут пристыковаться к след. слову
						|| (j >= 0x41 && j <= 0x5A) || (j >= 0x61 && j <= 0x7A) // англ.буквы
						|| (wordLen == 1 && lastCh == 'е') // "её" сокращается до "е" и получается много ошибок "е" + "бал|бан|бу..."
					) { // сохраняем слово
						pos.push(s);
						s = '';
						newWord = true;
					} else { // запишем длину союзов
						pos[pos.length - 1] = (pos[pos.length - 1] & 0xFFFF) | (s.length << 16);
					}
					wordBeginLen = 0; // обнуляем и для <=2-х буквенных, чтобы не перывалась цепочка 'е б а*л'
					wordLen = 0;
				}
				lastCh = ch;
			}
			if (s) pos.push(s);

			while (pos.length) {
				// движемся с конца в начало, иначе у нас индексы сместятся при замене текста
				s = pos.pop();
				var start:int = pos.pop();
				wordLen = s.length;
				if (wordLen > 1) for (var w:String in ABUSIVE_PATTERNS) { // проверяем все шаблоны
					var patternLen:int = w.length;
					if (wordLen >= patternLen && (i = s.indexOf(w)) >= 0) {
						// что было перед и после "w", чтобы проверить по исключениям
						var wordBegin:String = s.substr(0, i);
						wordBeginLen = wordBegin.length;
						var wordEnd:String = s.substr(i + patternLen), wordEndLen:int = wordEnd.length;
						
						//trace('pat=', w, 'at=', s, 'wordStart=', wordBegin, 'wordEnd=', wordEnd);
						
						var skip:Boolean = false;
						for each (var rule:String in ABUSIVE_PATTERNS[w]) { // проверяем исключения
							lastCh = rule.charAt(0);
							rule = rule.substr(1);
							var ruleLen:int = rule.length;
							if (lastCh == '<') {
								if (wordBeginLen >= ruleLen && wordBegin.substr(wordBeginLen - ruleLen, ruleLen) == rule) {
									//trace('  skip:', rule);
									skip = true;
									break;
								}
							} else if (lastCh == '>') {
								if (wordEndLen >= ruleLen && wordEnd.substr(0, ruleLen) == rule) {
									//trace('  skip:', rule);
									skip = true;
									break;
								}
							} else if (lastCh == '*') {
								if ((wordBeginLen && wordBeginLen != (start >> 16)) || wordEndLen) {
									//trace('skip "'+w+'" only full word. wordBeginLen=', wordBeginLen, 'prStart=', (start >> 16), 'wordEndLen=', wordEndLen);
									skip = true;
									break;
								}
							} else {
								trace('Unknown rule: "' + lastCh + '"');
							}
						}
						
						if (!skip) { // это мат, помечаем
							LAST_USED_PATTERN = w;
							start &= 0xFFFF;
							j = start;
							patternLen = wordLen;
							rule = (moderatorMode ? '<' : CENSORED);
							lastCh = null;
							while (patternLen) {
								s = text.charAt(j++);
								ch = REPL[s];
								if (ch) {
									if (moderatorMode) rule += s.toUpperCase();
									if (ch != lastCh) patternLen--;
								} else {
									if (moderatorMode) rule += s;
								}
								lastCh = ch;
							}
							if (moderatorMode) rule += '>';
							text = text.substr(0, start) + rule + text.substr(j);
						}
					}
				}
			}
			
			return text;
		}
		
		/**
		 * Проверяет правила на корректность, чтобы не было повторений, заменяемых букв и т.п.
		 * @return	Сообщения об ошибках или null
		 */
		public static function checkRules():String {
			if (!REPL) prepareRepl();
			var errors:Array = new Array();
			for (var s:String in ABUSIVE_PATTERNS) {
				var ch:String;
				var textLength:int = s.length;
				if (textLength < 2) {
					errors.push('"' + s + '" Слишком короткий шаблон');
				}
				// проверим, чтобы шаблон не содержал заменяемые буквы
				for (var i:int = 0; i < textLength; i++) {
					ch = s.charAt(i);
					if (ch != REPL[ch])
						errors.push('"' + s + '" некорректный символ "' + ch + '" -> "' + REPL[ch] + '"');
				}
				// проверим, чтобы не было некорректных правил
				for each (var rule:String in ABUSIVE_PATTERNS[s]) {
					if (rule) {
						ch = rule.charAt(0);
						if (ch != '<' && ch != '>' && ch != '*')
							errors.push('"' + s + '" правило "' + rule + '" начинается с неизвестной команды');
					} else {
						errors.push('"' + s + '" содержит пустое правило');
					}
				}
				// проверим, чтобы этот шаблон не был частью другого
				for (var w:String in ABUSIVE_PATTERNS) 
					if (s != w && (s.indexOf(w) >= 0 || w.indexOf(s) >= 0) &&
						(!ABUSIVE_PATTERNS[w] || ABUSIVE_PATTERNS[w][0] != '*') &&
						(!ABUSIVE_PATTERNS[s] || ABUSIVE_PATTERNS[s][0] != '*'))
					{
						errors.push('"' + s + '" дублирующиеся шаблоны "' + w + '"');
					}
			}
			return (errors.length ? errors.join("\n") : null);
		}
		
		//- PRIVATE -----------------------------------------------------------------------------------------------
		
		/** подготовить хэши */
		static private function prepareRepl():void {
			REPL = new Object();
			var textLength:int = REPL1.length;
			for (var i:int = 0; i < textLength; i++) REPL[ REPL1.charAt(i) ] = REPL2.charAt(i);
		}
		
		/** замены символов */
		private static const REPL1:String = 'АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЬЫЪЭЮЯЁACEKMOXYPTDHBабвгдежзийклмнопрстуфхцчшщьыъэюяёacekmoxyptdsiіЇї049_-–+*';
		private static const REPL2:String = 'абвгдежзийклмнопрстуфхцчшщьыьэюяеасекмохуртднвабвгдежзийклмнопрстуфхцчшщьыьэюяеасекмохуртдсииииочя*****';
		private static var REPL:Object;
		
		/**
		 * Часть матерного или оскорбительного слова: массив правил для исключений, где
		 * первый символ управляющий:
		 * 		< - прямо перед шаблоном не должно быть ...
		 * 		> сразу за шаблоном не должно быть ...
		 * 		* - слово строго совпадает с шаблоном
		 * null - без исключений
		 */
		private static const ABUSIVE_PATTERNS:Object = {
			'блят': ['<сугу'/*усугуБЛЯТь*/,'<подо'/*уподоБЛЯТь*/, '<ско'/*скоБЛЯТ*/, '<гра'/*разграБЛЯТь*/,'<зло'/*озлоБЛЯТь*/, '<лю'/*влюблять*/, '<лу'/*заглублять*/, '<ла'/*ослаблять*/, '<тре'/*потреблять*/, '<скор'/*оскорблять*/, '<раздро'/*раздроблят*/, '<осо'/*приспособляться,обособляться*/],
			'блеат': null,
			'бляд': null,
			'бля': ['*'],
			'взьеб': null,
			'вьеб': null,
			'вжопу': null,
			'высер': ['*'],
			'высрал': null,
			'высран': null,
			'выродк': null,
			'выродок': ['*'],
			'вжопе': null,
			'гавню': null,
			'говню': null,
			'гомик': null,
			'гомосек': ['>суа'/*гомосексуаль**/],
			'гандон': ['<пропа'],
			'гондон': null,
			'гнида': null,
			'залуп': ['>и'/*залупил*/,'>лю','>ог'/*за лупоглазиками*/,'>ящ'/*за лупящей*/,'>ят'/*как залупят*/],
			'засран': null,
			'нах': ['*'],
			'нунах': ['<ка'/*канунах*/],
			'нех': ['*'],
			'даун': ['*'], // ДАУН-хаус, ДАУН-синдром, дауненок (ребенок с синдромом дауна), нокДАУН
			'дроч': ['>ена'/*Дрочёна — (также драчёна)  полузабытое блюдо русской кухни из яиц*/, '>ист'/*гидроочистка*/],
			'дрюч': null,
			'дибил': ['<бо'/*боДИБИЛдер*/],
			'дебил': ['<бо', '>ьн'/*дебильная*/],
			'долбаеб': null, // много вариантов "долбаем"
			'долбоеб': null,
			'далбае': null,
			'далбое': null,
			'выбл': ['>ен'/*ВЫБЛенка*/],
			'жыд': null,
			'ебтвою': null,
			'заеб': null,
			'защекан': null,
			'еб': ['*'],
			'еба': ['*'],
			'ебал': ['<ш'/*шЕБАЛина,шЕБАЛинец*/, '<пер'/*перЕБАЛ...*/, '>ет'/*кордЕБАЛет*/, '>аб'/*не балабол*/,'<кол'/*колЕБАЛ*/, '<хл'/*хлЕБАЛ*/, '<скр'/*выскрЕБАЛ*/, '>тыва'/*перебалтывал*/, '<гр'/*выгрЕБАЛ*/, '<н'/*"не"+любое слово на "бал": нЕ БАЛьное*/, '<ж'/*"же"+любое слово на "бал": такой же БАЛ*/],
			'ебат': ['<скр'/*соскрЕБАТь*/, '<кол'/*заколЕБАТь*/,'<д'/*дебаты*/, '<ст'/*стЕБАТься*/, '<гр'/*загрЕБАТь*/, '<скр'/*выскрЕБАТь*/, '<хл'/*хлЕБАТь*/, '<н'/*"не"+любое слово на "бат": нЕ БАТаталия*/, '<ж'/*"же"+*/],
			'ебет': ['<щ'/*щЕБЕТ*/,'<скр'/*скрЕБЕТ*/,'<л'/*ЛЕБЕТКА*/,'<гр','<д', '<хр', '>ипа'/*тебетипа*/, '<н'/*"не"+любое слово на "бет": нЕ БЕТа*/, '<ж'/*"же"+*/],
			'ебись': ['<скр'/*скребись*/],
			'еблан': ['<н'/*"не"+любое слово на "блан": нЕ БЛАНк*/, '<ж'/*"же"+*/],
			'ебан': ['<хл'/*хлЕБАНие*/, '<ик'/*икЕБАНа*/, '<гр', '<кол', '<скр'/*выскрЕБАНие*/, '<вн'/*внЕБАНковск*/, '>к'/*дойчЕБАНк*/, '<н'/*"не"+любое слово на "бан": нЕ БАНально*/, '<ж'/*"же"+*/, '<эст'/*Эстебан*/, '<ч'/*чебан*/, '>алит'/*веб-аналитик*/],
			'ебен': ['<цел'/*целЕБЕН*/, '<хл'/*хлЕБЕНное*/, '>евк'/*тЕБЕНёвка*/,'<мол'/*молЕБЕН*/, '<щ'/*щебень*/, '<р'/*рЕБЕНок*/,'<лш'/*волшЕБЕН*/,'<жд'/*враждЕБЕН*/, '<н'/*"не"+любое слово на "бен": нЕ БЕНгальский*/, '<ж'/*"же"+*/, '<тотл'/*Тотлебен*/],
			'ебеш': ['<пер'/*перЕБЕШусь*/,'<кр'/*скрЕБЕШь*/,'<гр'/*грЕБЕШь*/, '<н'/*"не"+любое слово на "беш": нЕ БЕШеный*/, '<ж'/*"же"+*/],
			'ебло': ['<скр'/*скрЕБЛО*/, '<гр', '>к'/*дЕБЛОкада,дЕБЛОкировка*/, '<н'/*"не"+любое слово на "бло": нЕ БЛОк*/, '<ж'/*"же"+*/],
			'ебнут': ['<хл'/*захлЕБНУТся*/], // у "ебну" очень много исключеий
			'ебнул': ['<хл'/*хлЕБНУЛи*/],
			'ебля': ['<ст'/*стЕБЛЯх*/, '<потр'/*потреблять*/, '<стр'/*истреблять*/, '<гр'/*грЕБЛЯ*/, '<кол'/*колЕБЛЯ*/, '<н'/*"не"+*/, '<ж'/*"же"+*/], 
			'ебли': ['<пер'/*пере-бли...*/, '<ст'/*стЕБЛИ*/, '<служ'/*служЕБЛИ*/, '<кр'/*отскрЕБЛИ*/, '<нст'/*констЕБЛИ*/, '<м'/*мЕБЛИрован*/, '<н'/*"не"+любое слово на "бли": нЕ БЛИзко*/, '<ж'/*"же"+*/, '<гр'/*грЕБЛИ*/, '<кол'/*заколЕБЛИ*/, '<ист'/*истЕБЛИшмент*/],
			'ебош': ['<д'/*дЕБОШ*/, '<н'/*"не"+*/, '<ж'/*"же"+*/],
			'ебу': ['*'],
			'ебут': ['<ш'/*шЕБУТной*/, '<кр'/*отскрЕБУТ*/, '<н'/*"не"+*/, '<ж'/*"же"+*/, '<гр'/*грЕБУТ*/, '<ст'/*стЕБУТься*/],
			'ебуч': ['<отч'/*отчЕБУЧить*/, '<н'/*"не"+*/, '<ж'/*"же"+*/],
			'ебусь': ['*'],
			'выеб': null,
			'еби': ['*'],
			'манда': ['<ко', '>рин', '<а', '>т'/*МАНДАт*/, '>нт'/*МАНДАнт*/, '>лай'/*Мандалай*/, '<ар'/*Арманда*/],
			'манду': ['<ко', '<а', '<кат'/*катманду*/, '<ар'/*Арманду*/],
			'мандо': ['<ко', '<а', '>рин', '>л'/*МАНДОлина*/, '<ар'/*Армандо*/],
			'минет': ['*'], // любое слово заканчивающееся на "ми" и следом "нет"
			'миньет': null,
			'мразь': null,
			// 'мраз': null, // есть фамилия "МРАЗ" и "в 5-м разе"
			'муда': ['<мах'/*махМУДА*/, '<тал'/*талМУДА*/, '>рь'/*аМУДАрья*/, '<бер'/*Бермудах*/],
			'мудил': null,
			'мудо': ['<тал'/*талМУДОв*/, '<мах'/*махМУДОм*/, '<бер'/*Бермудовый*/],
			'наебну': null,
			'нахер': ['>увим'/*на херувиме*/, '>сонс'/*на херсонск*/],
			'нахую': null,
			'разьеба': null,
			'обосал': ['>ив'/*ОБ ОСАЛивании*/], // "обоса" нельзя, ложные срабатывания: "пО БОСАм", "мозгОБОССА"
			'обосаны': null, // 'обосан' низя - много вариантов ОБ ОСАНке
			'отсосал': null,
			'отсоси': ['>ск'/*от сосиски*/, '>со'/*от сосисок, от сосисочной*/],
			'отьеб': null,
			'падла': ['*'],
			'падлы': ['*'],
			'педик': ['>юр', '>ул'/*ПЕДИКулез*/],
			'педри': null,
			'пидар': ['<ски', '<ла'/*лаПИДАРно*/],
			'пидер': ['<э'/*эПИДЕРма*/],
			'пидр': ['<э'/*эПИДРасследование*/],
			'пидор': null,
			'пздц': null,
			'пизд': null,
			'пезд': null,
			'писд': null,
			'пох': ['*'],
			'подьеб': null,
			'похую': null,
			'пнх': null,
			'саси': ['*'],
			'соси': ['*'],
			'спермо': ['<эндо'/*эндоспермой*/],
			'сперму': null,
			'стерва': ['*'], //стервец, стервозная, '>ен'/*оСТЕРВенев*/, '>ятн'/*СТЕРВятник*/],
			'срака': ['*'], // С РАКАми
			'сраки': ['>т'/*С РАКИтной*/],
			'сруль': ['*'], // с рулькой
			'срут': ['*'],
			'сыкун': null,
			'сыкло': null,
			'сыкуха': null,
			'сраная': null,
			'сука': ['*'], // с указанием, с указательным, с указами, С УКАтанных, С УКАзчиком, С УКАзующим, С УКАзкой, ...
			'сукаь': null,
			'суки': ['<бар'],
			'суко': ['*'], // СУКОм, СУКОватость, СУКОнная, с укором, С УКОризной, С УКОренившихся, С УКОрачивающей, с уколом, 
			'сучен': ['>ие'/*СУЧЕние*/, '<бар', '>ия'/*с учения*/, '>ич', '>иц', '>ик', '>ий', '>ье'/*с ученьем*/, '>ых'/*с ученых*/, '>ым'/*с учеными*/], // "суче" много исключений
			// "СУЧИ лапками" // 'сучи': ['<бар', '<в', '>ва'/*выСУЧИвать*/, '<за'/*заСУЧИл*/],
			'сучар': null,
			'сцука': ['>тами'/*С ЦУКАтами*/],
			'сцуки': null,
			'сцуко': null,
			'сцыку': null,
			'сышь': ['*'],
			'траха': ['<ас'/*асТРАХАни*/, '<с'/*страха*/, '>тлу'/*оТ РАХАт-лукума*/],
			'ублюдок': ['*'], // "у блюда"
			'ублюдки': ['*'],
			'уеба': null,
			'уеби': null,
			'уебок': null,
			'угробищ': null,
			'урод': ['*'],
			'уебыш': null,
			'членосос': null,
			'целка': null,
			'целки': null,
			'чернож': ['>ел'/*черножелтый*/],
			'похер': ['>увим'/*по херувиму*/, '>сонс'/*по херсонской*/],
			'пердун': null,
			'шалав': null,
			'шлюх': null,
			'чмо': ['*'],
			'чмошн': null,
			'уебк': null,
			'уебыв': null,
			'ыговно': null, // ты/вы-говно
			'хер': ['*'],
			'хуе': ['>д'/*ах уеду*/, '>ха'/*ах уехал*/, '>зж'/*ах уезжайте*/, '<ша'/*шаХУЕт*/,'>шь'/*сХУЕшь*/,'<пло'/*сплоХУЕм*/, '<пси'/*псиХУЕм*/, '<стра'/*застраХУЕм*/],
			'хуи': ['>мблд'/*ах уимблдонский*/],
			'хуй': ['<ша'/*шаХУЙ*/,'<с'/*сХУЙся*/,'<пло','<пла',/*сплоХУЕм*/ '<стра', '<штри', '<пси'],
			'хуя': ['<ша'/*шаХУЯ*/,'<пло','<пла',/*сплоХУЯ*/ '<стра', '<штри', '<пси', '>звлен'/*ах уязвлен*/, '>звим'/*ох уязвимое*/],
			'хуле': ['*'],
			'ахули': ['*'],
			'хули': ['*'],
			'хуль': ['*']
		}
		
	}
	
}
